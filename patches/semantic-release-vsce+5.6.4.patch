diff --git a/node_modules/semantic-release-vsce/.DS_Store b/node_modules/semantic-release-vsce/.DS_Store
new file mode 100644
index 0000000..63224af
Binary files /dev/null and b/node_modules/semantic-release-vsce/.DS_Store differ
diff --git a/node_modules/semantic-release-vsce/index.js b/node_modules/semantic-release-vsce/index.js
index 7f3f510..72a99b5 100644
--- a/node_modules/semantic-release-vsce/index.js
+++ b/node_modules/semantic-release-vsce/index.js
@@ -6,7 +6,7 @@ const vscePrepare = require('./lib/prepare');
 
 let verified = false;
 let prepared = false;
-let packagePath;
+let vsixPath;
 
 async function verifyConditions(pluginConfig, { logger, cwd }) {
   await verifyVsce(pluginConfig, { logger, cwd });
@@ -21,12 +21,7 @@ async function prepare(
     await verifyVsce(pluginConfig, { logger, cwd });
     verified = true;
   }
-  packagePath = await vscePrepare(
-    version,
-    pluginConfig.packageVsix,
-    logger,
-    cwd,
-  );
+  vsixPath = await vscePrepare(pluginConfig, { logger, cwd, version });
   prepared = true;
 }
 
@@ -41,12 +36,7 @@ async function publish(
 
   if (!prepared) {
     // BC: prior to semantic-release v15 prepare was part of publish
-    packagePath = await vscePrepare(
-      version,
-      pluginConfig.packageVsix,
-      logger,
-      cwd,
-    );
+    vsixPath = await vscePrepare(pluginConfig, { logger, cwd, version });
   }
 
   // If publishing is disabled, return early.
@@ -57,10 +47,10 @@ async function publish(
   if (pluginConfig?.publishPackagePath) {
     // Expand glob
     const globSync = require('glob').glob.sync;
-    packagePath = globSync(pluginConfig.publishPackagePath, { cwd });
+    vsixPath = globSync(pluginConfig.publishPackagePath, { cwd });
   }
 
-  return vscePublish(version, packagePath, logger, cwd);
+  return vscePublish(pluginConfig, { logger, cwd, version, vsixPath });
 }
 
 module.exports = {
diff --git a/node_modules/semantic-release-vsce/lib/prepare.js b/node_modules/semantic-release-vsce/lib/prepare.js
index 52e83c0..b692a7d 100644
--- a/node_modules/semantic-release-vsce/lib/prepare.js
+++ b/node_modules/semantic-release-vsce/lib/prepare.js
@@ -2,50 +2,60 @@
 
 const execa = require('execa');
 const { readJson } = require('fs-extra');
+const path = require('path');
 const { isOvsxPublishEnabled, isTargetEnabled } = require('./utils');
 
-module.exports = async (version, packageVsix, logger, cwd) => {
-  if (packageVsix === false) {
+module.exports = async (pluginConfig, { logger, cwd, version }) => {
+  if (pluginConfig.packageVsix === false) {
     return;
   }
 
   const ovsxPublishEnabled = isOvsxPublishEnabled();
 
-  if (packageVsix || ovsxPublishEnabled) {
-    if (!packageVsix && ovsxPublishEnabled) {
+  if (pluginConfig.packageVsix || ovsxPublishEnabled) {
+    if (!pluginConfig.packageVsix && ovsxPublishEnabled) {
       logger.log(
         'Packaging to VSIX even though `packageVsix` is not set as publish to OpenVSX is enabled.',
       );
     }
 
-    let packagePath;
+    let vsixPath;
 
-    if (typeof packageVsix === 'string') {
-      packagePath = packageVsix;
+    if (typeof pluginConfig.packageVsix === 'string') {
+      vsixPath = pluginConfig.packageVsix;
     } else {
-      const { name } = await readJson('./package.json');
+      const packagePath = pluginConfig.packageRoot
+        ? path.join(cwd, pluginConfig.packageRoot, 'package.json')
+        : path.join(cwd, 'package.json');
+      const { name } = await readJson(packagePath);
       if (isTargetEnabled()) {
-        packagePath = `${name}-${process.env.VSCE_TARGET}-${version}.vsix`;
+        vsixPath = `${name}-${process.env.VSCE_TARGET}-${version}.vsix`;
       } else {
-        packagePath = `${name}-${version}.vsix`;
+        vsixPath = `${name}-${version}.vsix`;
       }
     }
 
-    logger.log(`Packaging version ${version} to ${packagePath}`);
+    logger.log(`Packaging version ${version} to ${vsixPath}`);
 
     const options = [
       'package',
       version,
       '--no-git-tag-version',
       '--out',
-      packagePath,
+      vsixPath,
     ];
     if (isTargetEnabled()) {
       options.push('--target', process.env.VSCE_TARGET);
     }
 
-    await execa('vsce', options, { stdio: 'inherit', preferLocal: true, cwd });
+    await execa('vsce', options, {
+      stdio: 'inherit',
+      preferLocal: true,
+      cwd: pluginConfig.packageRoot
+        ? path.join(cwd, pluginConfig.packageRoot)
+        : cwd,
+    });
 
-    return packagePath;
+    return vsixPath;
   }
 };
diff --git a/node_modules/semantic-release-vsce/lib/publish.js b/node_modules/semantic-release-vsce/lib/publish.js
index b059ad5..6dbc0ed 100644
--- a/node_modules/semantic-release-vsce/lib/publish.js
+++ b/node_modules/semantic-release-vsce/lib/publish.js
@@ -2,26 +2,32 @@
 
 const execa = require('execa');
 const { readJson } = require('fs-extra');
+const path = require('path');
 const {
   isOvsxPublishEnabled,
   isTargetEnabled,
   isVscePublishEnabled,
 } = require('./utils');
 
-module.exports = async (version, packagePath, logger, cwd) => {
-  const { publisher, name } = await readJson('./package.json');
+module.exports = async (pluginConfig, { logger, cwd, version, vsixPath }) => {
+  const packagePath = pluginConfig.packageRoot
+    ? path.join(cwd, pluginConfig.packageRoot, 'package.json')
+    : path.join(cwd, 'package.json');
+  const { publisher, name } = await readJson(packagePath);
 
   const options = ['publish'];
 
   let message = `Publishing version ${version}`;
-  if (packagePath) {
-    // Ensure packagePath is a list
-    if (typeof packagePath === 'string') {
-      packagePath = [packagePath];
+
+  let packagePathArg = vsixPath || pluginConfig.packageVsix;
+  if (packagePathArg) {
+    // Ensure packagePathArg is a list
+    if (typeof packagePathArg === 'string') {
+      packagePathArg = [packagePathArg];
     }
 
-    options.push('--packagePath', ...packagePath);
-    message += ` from ${packagePath.join(', ')}`;
+    options.push('--packagePath', ...packagePathArg);
+    message += ` from ${packagePathArg.join(', ')}`;
   } else {
     options.push(version, '--no-git-tag-version');
 
@@ -36,7 +42,13 @@ module.exports = async (version, packagePath, logger, cwd) => {
   if (isVscePublishEnabled()) {
     logger.log(message + ' to Visual Studio Marketplace');
 
-    await execa('vsce', options, { stdio: 'inherit', preferLocal: true, cwd });
+    await execa('vsce', options, {
+      stdio: 'inherit',
+      preferLocal: true,
+      cwd: pluginConfig.packageRoot
+        ? path.join(cwd, pluginConfig.packageRoot)
+        : cwd,
+    });
     const vsceUrl = `https://marketplace.visualstudio.com/items?itemName=${publisher}.${name}`;
 
     logger.log(`The new version is available at ${vsceUrl}.`);
@@ -50,7 +62,13 @@ module.exports = async (version, packagePath, logger, cwd) => {
     logger.log(message + 'to Open VSX Registry');
 
     // When publishing to OpenVSX, packagePath will be always set
-    await execa('ovsx', options, { stdio: 'inherit', preferLocal: true, cwd });
+    await execa('ovsx', options, {
+      stdio: 'inherit',
+      preferLocal: true,
+      cwd: pluginConfig.packageRoot
+        ? path.join(cwd, pluginConfig.packageRoot)
+        : cwd,
+    });
     const ovsxUrl = `https://open-vsx.org/extension/${publisher}/${name}/${version}`;
 
     logger.log(`The new ovsx version is available at ${ovsxUrl}`);
diff --git a/node_modules/semantic-release-vsce/lib/verify-ovsx-auth.js b/node_modules/semantic-release-vsce/lib/verify-ovsx-auth.js
index 849eed1..91394c5 100644
--- a/node_modules/semantic-release-vsce/lib/verify-ovsx-auth.js
+++ b/node_modules/semantic-release-vsce/lib/verify-ovsx-auth.js
@@ -2,8 +2,12 @@
 
 const SemanticReleaseError = require('@semantic-release/error');
 const execa = require('execa');
+const path = require('path');
 
-module.exports = async (logger, cwd) => {
+module.exports = async (pluginConfig, { logger, cwd }) => {
+  const packageRoot = pluginConfig.packageRoot
+    ? path.join(cwd, pluginConfig.packageRoot)
+    : cwd;
   logger.log('Verifying authentication for ovsx');
 
   if (!process.env.OVSX_PAT) {
@@ -14,7 +18,10 @@ module.exports = async (logger, cwd) => {
   }
 
   try {
-    await execa('ovsx', ['verify-pat'], { preferLocal: true, cwd });
+    await execa('ovsx', ['verify-pat'], {
+      preferLocal: true,
+      cwd: packageRoot,
+    });
   } catch (e) {
     throw new SemanticReleaseError(
       `Invalid ovsx personal access token. Additional information:\n\n${e}`,
diff --git a/node_modules/semantic-release-vsce/lib/verify-pkg.js b/node_modules/semantic-release-vsce/lib/verify-pkg.js
index 553530f..0336dc6 100644
--- a/node_modules/semantic-release-vsce/lib/verify-pkg.js
+++ b/node_modules/semantic-release-vsce/lib/verify-pkg.js
@@ -3,11 +3,16 @@
 const SemanticReleaseError = require('@semantic-release/error');
 const { readJson } = require('fs-extra');
 const fs = require('fs');
+const path = require('path');
 
-module.exports = async () => {
-  if (!fs.existsSync('./package.json')) {
+module.exports = async (pluginConfig, { logger, cwd }) => {
+  const packagePath = pluginConfig.packageRoot
+    ? path.join(cwd, pluginConfig.packageRoot, 'package.json')
+    : path.join(cwd, 'package.json');
+
+  if (!fs.existsSync(packagePath)) {
     throw new SemanticReleaseError(
-      'The `package.json` was not found. A `package.json` is required to release with vsce.',
+      `${packagePath} was not found. A package.json is required to release with vsce.`,
       'ENOPKG',
     );
   }
@@ -15,7 +20,7 @@ module.exports = async () => {
   let packageJson;
 
   try {
-    packageJson = await readJson('./package.json');
+    packageJson = await readJson(packagePath);
   } catch {
     throw new SemanticReleaseError(
       'The `package.json` seems to be invalid.',
diff --git a/node_modules/semantic-release-vsce/lib/verify-vsce-auth.js b/node_modules/semantic-release-vsce/lib/verify-vsce-auth.js
index cb25d01..fcc3fdf 100644
--- a/node_modules/semantic-release-vsce/lib/verify-vsce-auth.js
+++ b/node_modules/semantic-release-vsce/lib/verify-vsce-auth.js
@@ -2,8 +2,13 @@
 
 const SemanticReleaseError = require('@semantic-release/error');
 const execa = require('execa');
+const path = require('path');
+
+module.exports = async (pluginConfig, { logger, cwd }) => {
+  const packageRoot = pluginConfig.packageRoot
+    ? path.join(cwd, pluginConfig.packageRoot)
+    : cwd;
 
-module.exports = async (logger, cwd) => {
   logger.log('Verifying authentication for vsce');
 
   if (!process.env.VSCE_PAT) {
@@ -14,7 +19,10 @@ module.exports = async (logger, cwd) => {
   }
 
   try {
-    await execa('vsce', ['verify-pat'], { preferLocal: true, cwd });
+    await execa('vsce', ['verify-pat'], {
+      preferLocal: true,
+      cwd: packageRoot,
+    });
   } catch (e) {
     throw new SemanticReleaseError(
       `Invalid vsce personal access token. Additional information:\n\n${e}`,
diff --git a/node_modules/semantic-release-vsce/lib/verify.js b/node_modules/semantic-release-vsce/lib/verify.js
index b8588ec..ed8b5c8 100644
--- a/node_modules/semantic-release-vsce/lib/verify.js
+++ b/node_modules/semantic-release-vsce/lib/verify.js
@@ -8,8 +8,8 @@ const verifyTarget = require('./verify-target');
 const { isOvsxPublishEnabled, isVscePublishEnabled } = require('./utils');
 
 module.exports = async (pluginConfig, { logger, cwd }) => {
-  await verifyPkg();
-  await verifyTarget();
+  await verifyPkg(pluginConfig, { logger, cwd });
+  await verifyTarget(pluginConfig, { logger, cwd });
 
   if (pluginConfig?.publish !== false) {
     const vscePublishEnabled = isVscePublishEnabled();
@@ -21,14 +21,14 @@ module.exports = async (pluginConfig, { logger, cwd }) => {
       );
     }
     if (vscePublishEnabled) {
-      await verifyVsceAuth(logger, cwd);
+      await verifyVsceAuth(pluginConfig, { logger, cwd });
     } else {
       logger.log(
         'Skipping verification of the vsce personal access token as the `VSCE_PAT` environment variable is not set.\n\nDid you know you can easily start publishing to Visual Studio Marketplace with `semantic-release-vsce`?\nLearn more at https://github.com/felipecrs/semantic-release-vsce#publishing-to-visual-studio-marketplace',
       );
     }
     if (ovsxPublishEnabled) {
-      await verifyOvsxAuth(logger, cwd);
+      await verifyOvsxAuth(pluginConfig, { logger, cwd });
     } else {
       logger.log(
         'Skipping verification of the ovsx personal access token as the `OVSX_PAT` environment variable is not set.\n\nDid you know you can easily start publishing to Open VSX Registry with `semantic-release-vsce`?\nLearn more at https://github.com/felipecrs/semantic-release-vsce#publishing-to-open-vsx-registry',
diff --git a/node_modules/semantic-release-vsce/test/index.test.js b/node_modules/semantic-release-vsce/test/index.test.js
index 43afdda..28245cd 100644
--- a/node_modules/semantic-release-vsce/test/index.test.js
+++ b/node_modules/semantic-release-vsce/test/index.test.js
@@ -66,10 +66,12 @@ test('prepare and unverified', async (t) => {
     }),
   );
   t.deepEqual(vscePrepareStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    pluginConfig.packageVsix,
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+    },
   ]);
 });
 
@@ -86,10 +88,12 @@ test('prepare and verified', async (t) => {
 
   t.true(verifyVsceStub.calledOnce);
   t.deepEqual(vscePrepareStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    pluginConfig.packageVsix,
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+    },
   ]);
 });
 
@@ -106,10 +110,13 @@ test('publish that is unverified and unprepared', async (t) => {
   t.true(verifyVsceStub.calledOnce);
   t.true(vscePrepareStub.calledOnce);
   t.deepEqual(vscePublishStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    undefined,
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+      vsixPath: undefined,
+    },
   ]);
 });
 
@@ -127,10 +134,13 @@ test('publish that is verified but unprepared', async (t) => {
   t.true(verifyVsceStub.calledOnce);
   t.true(vscePrepareStub.calledOnce);
   t.deepEqual(vscePublishStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    undefined,
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+      vsixPath: undefined,
+    },
   ]);
 });
 
@@ -149,10 +159,13 @@ test('publish that is already verified & prepared', async (t) => {
   t.true(verifyVsceStub.calledOnce);
   t.true(vscePrepareStub.calledOnce);
   t.deepEqual(vscePublishStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    packagePath,
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+      vsixPath: packagePath,
+    },
   ]);
 });
 
@@ -193,10 +206,13 @@ test('it can publish when `OVSX_PAT` is present but `VSCE_PAT` is missing', asyn
   t.true(verifyVsceStub.calledOnce);
   t.true(vscePrepareStub.calledOnce);
   t.deepEqual(vscePublishStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    undefined,
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+      vsixPath: undefined,
+    },
   ]);
 });
 
@@ -223,9 +239,12 @@ test('expand globs if publishPackagePath is set', async (t) => {
   t.true(verifyVsceStub.calledOnce);
   t.true(vscePrepareStub.calledOnce);
   t.deepEqual(vscePublishStub.getCall(0).args, [
-    semanticReleasePayload.nextRelease.version,
-    ['package1.vsix', 'package2.vsix'],
-    semanticReleasePayload.logger,
-    semanticReleasePayload.cwd,
+    pluginConfig,
+    {
+      version: semanticReleasePayload.nextRelease.version,
+      logger: semanticReleasePayload.logger,
+      cwd: semanticReleasePayload.cwd,
+      vsixPath: ['package1.vsix', 'package2.vsix'],
+    },
   ]);
 });
diff --git a/node_modules/semantic-release-vsce/test/prepare.test.js b/node_modules/semantic-release-vsce/test/prepare.test.js
index 8fa5823..62ec2e3 100644
--- a/node_modules/semantic-release-vsce/test/prepare.test.js
+++ b/node_modules/semantic-release-vsce/test/prepare.test.js
@@ -25,7 +25,7 @@ test('packageVsix is disabled', async (t) => {
   });
 
   const version = '1.0.0';
-  await prepare(version, false, logger);
+  await prepare({ packageVsix: false }, { version, logger, cwd });
 
   t.true(execaStub.notCalled);
 });
@@ -37,7 +37,7 @@ test('packageVsix is not specified', async (t) => {
   });
 
   const version = '1.0.0';
-  await prepare(version, undefined, logger);
+  await prepare({}, { version, logger });
 
   t.true(execaStub.notCalled);
 });
@@ -51,7 +51,7 @@ test('packageVsix is a string', async (t) => {
   const version = '1.0.0';
   const packageVsix = 'test.vsix';
   const packagePath = packageVsix;
-  const result = await prepare(version, packageVsix, logger, cwd);
+  const result = await prepare({ packageVsix }, { logger, cwd, version });
 
   t.deepEqual(result, packagePath);
   t.deepEqual(execaStub.getCall(0).args, [
@@ -78,7 +78,7 @@ test('packageVsix is true', async (t) => {
   const packageVsix = true;
   const packagePath = `${name}-${version}.vsix`;
 
-  const result = await prepare(version, packageVsix, logger, cwd);
+  const result = await prepare({ packageVsix }, { logger, cwd, version });
 
   t.deepEqual(result, packagePath);
   t.deepEqual(execaStub.getCall(0).args, [
@@ -109,7 +109,7 @@ test('packageVsix is not set but OVSX_PAT is', async (t) => {
   const packageVsix = undefined;
   const packagePath = `${name}-${version}.vsix`;
 
-  const result = await prepare(version, packageVsix, logger, cwd);
+  const result = await prepare({ packageVsix }, { logger, cwd, version });
 
   t.deepEqual(result, packagePath);
   t.deepEqual(execaStub.getCall(0).args, [
@@ -140,7 +140,7 @@ test('packageVsix when target is set', async (t) => {
     VSCE_TARGET: target,
   });
 
-  const result = await prepare(version, true, logger, cwd);
+  const result = await prepare({ packageVsix: true }, { logger, cwd, version });
 
   t.deepEqual(result, packagePath);
   t.deepEqual(execaStub.getCall(0).args, [
@@ -178,7 +178,7 @@ test('packageVsix when target is set to universal', async (t) => {
     VSCE_TARGET: 'universal',
   });
 
-  const result = await prepare(version, true, logger, cwd);
+  const result = await prepare({ packageVsix: true }, { logger, cwd, version });
 
   t.deepEqual(result, packagePath);
   t.deepEqual(execaStub.getCall(0).args, [
diff --git a/node_modules/semantic-release-vsce/test/publish.test.js b/node_modules/semantic-release-vsce/test/publish.test.js
index 7330be6..8145c2e 100644
--- a/node_modules/semantic-release-vsce/test/publish.test.js
+++ b/node_modules/semantic-release-vsce/test/publish.test.js
@@ -37,7 +37,7 @@ test('publish', async (t) => {
   sinon.stub(process, 'env').value({
     VSCE_PAT: token,
   });
-  const result = await publish(version, undefined, logger, cwd);
+  const result = await publish({}, { logger, cwd, version });
 
   t.deepEqual(result, {
     name: 'Visual Studio Marketplace',
@@ -65,12 +65,12 @@ test('publish with packagePath', async (t) => {
   });
 
   const version = '1.0.0';
-  const packagePath = 'test.vsix';
+  const vsixPath = 'test.vsix';
   const token = 'abc123';
   sinon.stub(process, 'env').value({
     VSCE_PAT: token,
   });
-  const result = await publish(version, packagePath, logger, cwd);
+  const result = await publish({}, { logger, cwd, version, vsixPath });
 
   t.deepEqual(result, {
     name: 'Visual Studio Marketplace',
@@ -78,7 +78,7 @@ test('publish with packagePath', async (t) => {
   });
   t.deepEqual(execaStub.getCall(0).args, [
     'vsce',
-    ['publish', '--packagePath', packagePath],
+    ['publish', '--packagePath', vsixPath],
     { stdio: 'inherit', preferLocal: true, cwd },
   ]);
 });
@@ -98,12 +98,12 @@ test('publish with multiple packagePath', async (t) => {
   });
 
   const version = '1.0.0';
-  const packagePath = ['test.vsix', 'test2.vsix'];
+  const vsixPath = ['test.vsix', 'test2.vsix'];
   const token = 'abc123';
   sinon.stub(process, 'env').value({
     VSCE_PAT: token,
   });
-  const result = await publish(version, packagePath, logger, cwd);
+  const result = await publish({}, { logger, cwd, version, vsixPath });
 
   t.deepEqual(result, {
     name: 'Visual Studio Marketplace',
@@ -111,7 +111,7 @@ test('publish with multiple packagePath', async (t) => {
   });
   t.deepEqual(execaStub.getCall(0).args, [
     'vsce',
-    ['publish', '--packagePath', ...packagePath],
+    ['publish', '--packagePath', ...vsixPath],
     { stdio: 'inherit', preferLocal: true, cwd },
   ]);
 });
@@ -137,7 +137,7 @@ test('publish with target', async (t) => {
     VSCE_PAT: token,
     VSCE_TARGET: target,
   });
-  const result = await publish(version, undefined, logger, cwd);
+  const result = await publish({}, { logger, cwd, version });
 
   t.deepEqual(result, {
     name: 'Visual Studio Marketplace',
@@ -165,13 +165,13 @@ test('publish to OpenVSX', async (t) => {
   });
 
   const version = '1.0.0';
-  const packagePath = 'test.vsix';
+  const packageVsix = 'test.vsix';
   const token = 'abc123';
   sinon.stub(process, 'env').value({
     OVSX_PAT: token,
     VSCE_PAT: token,
   });
-  const result = await publish(version, packagePath, logger, cwd);
+  const result = await publish({ packageVsix }, { logger, cwd, version });
 
   t.deepEqual(result, {
     name: 'Visual Studio Marketplace',
@@ -179,7 +179,7 @@ test('publish to OpenVSX', async (t) => {
   });
   t.deepEqual(execaStub.getCall(0).args, [
     'vsce',
-    ['publish', '--packagePath', packagePath],
+    ['publish', '--packagePath', packageVsix],
     { stdio: 'inherit', preferLocal: true, cwd },
   ]);
 
@@ -189,7 +189,7 @@ test('publish to OpenVSX', async (t) => {
   // });
   t.deepEqual(execaStub.getCall(1).args, [
     'ovsx',
-    ['publish', '--packagePath', packagePath],
+    ['publish', '--packagePath', packageVsix],
     { stdio: 'inherit', preferLocal: true, cwd },
   ]);
 });
@@ -209,12 +209,12 @@ test('publish to OpenVSX only', async (t) => {
   });
 
   const version = '1.0.0';
-  const packagePath = 'test.vsix';
+  const packageVsix = 'test.vsix';
   const token = 'abc123';
   sinon.stub(process, 'env').value({
     OVSX_PAT: token,
   });
-  const result = await publish(version, packagePath, logger, cwd);
+  const result = await publish({ packageVsix }, { logger, cwd, version });
 
   t.deepEqual(result, {
     name: 'Open VSX Registry',
@@ -223,7 +223,7 @@ test('publish to OpenVSX only', async (t) => {
   t.true(execaStub.calledOnce);
   t.deepEqual(execaStub.getCall(0).args, [
     'ovsx',
-    ['publish', '--packagePath', packagePath],
+    ['publish', '--packagePath', packageVsix],
     { stdio: 'inherit', preferLocal: true, cwd },
   ]);
 });
@@ -243,10 +243,10 @@ test('should not publish when neither vsce nor ovsx personal access token is con
   });
 
   const version = '1.0.0';
-  const packagePath = 'test.vsix';
+  const packageVsix = 'test.vsix';
   sinon.stub(process, 'env').value({});
 
-  const result = await publish(version, packagePath, logger, cwd);
+  const result = await publish({ packageVsix }, { logger, cwd, version });
 
   t.falsy(result);
   t.true(execaStub.notCalled);
diff --git a/node_modules/semantic-release-vsce/test/verify-ovsx-auth.test.js b/node_modules/semantic-release-vsce/test/verify-ovsx-auth.test.js
index 421bae3..d066d62 100644
--- a/node_modules/semantic-release-vsce/test/verify-ovsx-auth.test.js
+++ b/node_modules/semantic-release-vsce/test/verify-ovsx-auth.test.js
@@ -21,7 +21,7 @@ test('OVSX_PAT is set', async (t) => {
       .resolves(),
   });
 
-  await t.notThrowsAsync(() => verifyOvsxAuth(logger));
+  await t.notThrowsAsync(() => verifyOvsxAuth({}, { logger, cwd }));
   t.true(logger.log.calledOnce);
 });
 
@@ -36,7 +36,7 @@ test('OVSX_PAT is invalid', async (t) => {
 
   const verifyOvsxAuth = require('../lib/verify-ovsx-auth');
 
-  await t.throwsAsync(() => verifyOvsxAuth(logger), {
+  await t.throwsAsync(() => verifyOvsxAuth({}, { logger, cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'EEMPTYOVSXPAT',
   });
@@ -53,7 +53,7 @@ test('OVSX_PAT is invalid but not empty', async (t) => {
 
   const verifyOvsxAuth = require('../lib/verify-ovsx-auth');
 
-  await t.throwsAsync(() => verifyOvsxAuth(logger), {
+  await t.throwsAsync(() => verifyOvsxAuth({}, { logger, cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'EINVALIDOVSXPAT',
   });
diff --git a/node_modules/semantic-release-vsce/test/verify-pkg.test.js b/node_modules/semantic-release-vsce/test/verify-pkg.test.js
index e432573..789493b 100644
--- a/node_modules/semantic-release-vsce/test/verify-pkg.test.js
+++ b/node_modules/semantic-release-vsce/test/verify-pkg.test.js
@@ -3,6 +3,8 @@ const test = require('ava');
 const proxyquire = require('proxyquire');
 const SemanticReleaseError = require('@semantic-release/error');
 
+const cwd = process.cwd();
+
 test('package.json is found', async (t) => {
   const name = 'test';
   const publisher = 'tester';
@@ -19,7 +21,7 @@ test('package.json is found', async (t) => {
     },
   });
 
-  await t.notThrowsAsync(() => verifyPkg());
+  await t.notThrowsAsync(() => verifyPkg({}, { cwd }));
 });
 
 test('package.json is not found', async (t) => {
@@ -38,7 +40,7 @@ test('package.json is not found', async (t) => {
     },
   });
 
-  await t.throwsAsync(() => verifyPkg(), {
+  await t.throwsAsync(() => verifyPkg({}, { cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'ENOPKG',
   });
@@ -59,7 +61,7 @@ test('package is valid', async (t) => {
     },
   });
 
-  await t.notThrowsAsync(() => verifyPkg());
+  await t.notThrowsAsync(() => verifyPkg({}, { cwd }));
 });
 
 test('package is invalid', async (t) => {
@@ -72,7 +74,7 @@ test('package is invalid', async (t) => {
     },
   });
 
-  await t.throwsAsync(() => verifyPkg(), {
+  await t.throwsAsync(() => verifyPkg({}, { cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'EINVALIDPKG',
   });
@@ -91,7 +93,7 @@ test('package is missing name', async (t) => {
     },
   });
 
-  await t.throwsAsync(() => verifyPkg(), {
+  await t.throwsAsync(() => verifyPkg({}, { cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'ENOPKGNAME',
   });
@@ -110,7 +112,7 @@ test('package is missing publisher', async (t) => {
     },
   });
 
-  await t.throwsAsync(() => verifyPkg(), {
+  await t.throwsAsync(() => verifyPkg({}, { cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'ENOPUBLISHER',
   });
diff --git a/node_modules/semantic-release-vsce/test/verify-vsce-auth.test.js b/node_modules/semantic-release-vsce/test/verify-vsce-auth.test.js
index c2234a5..da33e38 100644
--- a/node_modules/semantic-release-vsce/test/verify-vsce-auth.test.js
+++ b/node_modules/semantic-release-vsce/test/verify-vsce-auth.test.js
@@ -20,7 +20,7 @@ test('VSCE_PAT is set', async (t) => {
       .resolves(),
   });
 
-  await t.notThrowsAsync(() => verifyVsceAuth(logger));
+  await t.notThrowsAsync(() => verifyVsceAuth({}, { logger, cwd }));
 });
 
 test('VSCE_PAT is valid', async (t) => {
@@ -35,7 +35,7 @@ test('VSCE_PAT is valid', async (t) => {
       .resolves(),
   });
 
-  await t.notThrowsAsync(() => verifyVsceAuth(logger));
+  await t.notThrowsAsync(() => verifyVsceAuth({}, { logger, cwd }));
 });
 
 test('VSCE_PAT is invalid', async (t) => {
@@ -49,7 +49,7 @@ test('VSCE_PAT is invalid', async (t) => {
 
   const verifyOvsxAuth = require('../lib/verify-vsce-auth');
 
-  await t.throwsAsync(() => verifyOvsxAuth(logger), {
+  await t.throwsAsync(() => verifyOvsxAuth({}, { logger, cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'EEMPTYVSCEPAT',
   });
@@ -67,7 +67,7 @@ test('VSCE_PAT is invalid but not empty', async (t) => {
       .rejects(),
   });
 
-  await t.throwsAsync(() => verifyVsceAuth(logger), {
+  await t.throwsAsync(() => verifyVsceAuth({}, { logger, cwd }), {
     instanceOf: SemanticReleaseError,
     code: 'EINVALIDVSCEPAT',
   });
